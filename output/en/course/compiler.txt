.. title: compiler
.. slug: compiler
.. date: 2015-08-13 09:40:35 UTC+04:30
.. tags: 
.. category: 
.. link: 
.. description: 
.. type: text

Book
=====

* `Compilers: Principles, Techniques, and Tools (2nd Edition). Alfred V. Aho, Monica S. Lam, Ravi Sethi, and Jeffrey D. Ullman. Addison Wesley, (August 2006) <http://dragonbook.stanford.edu/>`_
* `Introduction to Compilers and Language Design <https://www3.nd.edu/~dthain/compilerbook/>`_ `Code Examples <https://github.com/dthain/compilerbook-examples>`_
* `Basics of Compiler Design <hjemmesider.diku.dk/~torbenm/Basics/>`_

-------------

Other Resources
-------------------------
#. https://web.stanford.edu/class/cs143/
#. https://web.cs.hacettepe.edu.tr/~ilyas/Courses/BIL744/
#. https://www.csd.uwo.ca/~mmorenom/CS447/Lectures/Syntax.html/node8.html
#. https://www.researchgate.net/publication/2367776_An_Introduction_to_Compilers?enrichId=rgreq-3d6589b36b650b1be61ea0ce1b1b7805-XXX&enrichSource=Y292ZXJQYWdlOzIzNjc3NzY7QVM6OTg4Mjk0MzcyNDMzOTVAMTQwMDU3NDE4MjE5Ng%3D%3D&el=1_x_2&_esc=publicationCoverPdf
#. https://www.tutorialspoint.com/compiler_design/compiler_design_syntax_analysis.htm

---------

Regular Expression
===================

.. class:: yoosofan-change-ltr

  *  `<http://ddlsmurf.github.com/rxbuild/regex.html>`_
  *  `<http://cuneytyilmaz.com/prog/jrx/>`_
  *  `<http://regexpal.com>`_
  *  `<http://www.regexbuddy.com>`_

`lex samples </files/course/compiler/lex_sample.zip>`_

-----------

Tools
======

  *  `PLY (Python based) <http://www.dabeaz.com/ply/>`_
  *  `JS/CC <http://jscc.brobston.com>`_ ,  https://github.com/abrobston/jscc
  *  `jison (javascript based) <http://zaach.github.io/jison/>`_
  *  `antlr (java based) <http://www.antlr.org>`_
  *  `Quex (c/c++) <http://quex.sourceforge.net/>`_  
  *  `<http://pegjs.majda.cz/>`_
  *  `<http://compilers.pydata.org>`_
  *  `<http://lrparsing.sourceforge.net>`_
  *  `<https://github.com/liuxue1990/python-ll1-parser-generator>`_
  *  `<http://www.gnu.org/software/bison/bison.html>`_
  *  `<http://www.cocolab.com>`_
  * http://www.fit.vutbr.cz/~ikocman/llkptg/
  * https://github.com/rkocman/LLk-Parsing-Table-Generator
  * http://jsmachines.sourceforge.net/machines/ll1.html , https://sourceforge.net/projects/jsmachines/
  * http://hackingoff.com/compilers/ll-1-parser-generator
  *  `LISA <http://labraj.feri.um.si/lisa/>`_
  *  `<https://wiki.python.org/moin/LanguageParsing>`_
  *  `<http://pages.cpsc.ucalgary.ca/~aycock/spark>`_
  *  `<http://theory.stanford.edu/~amitp/yapps/>`_
  *  `<https://pypi.python.org/pypi/parsing/>`_
  *  `<http://www.compilers.net/Dir/Free/Compilers/CCpp.htm>`_
  *  `<http://grammatica.percederberg.net/download/index.html>`_
  *  `<http://catalog.compilertools.net/kits.html>`_
  *  `<http://irony.codeplex.com>`_
  *  `<http://flex.sourceforge.net>`_
  *  `<http://directory.fsf.org/project/yaccviso>`_
  *  `<http://sourceforge.net/project/showfiles.php?group_id=70447>`_
  *  `<http://www.boost.org/doc/libs/1_38_0/libs/spirit/classic/doc/introduction.html>`_
  *  `<https://gplex.codeplex.com/>`_
  *  `<http://dinosaur.compilertools.net>`_

Jison
======

`jison_try <http://zaach.github.io/jison/try/usf/index.html>`_ creates LL(1), LR(0), LALR(1), LR(1) from a context free grammar.


JSCC
=====

`jscc compiler tool <http://jscc.phorward-software.com/>`_

`simple calculator </files/course/compiler/jscc/simple_extended_calculator.txt>`_

`simple programming language </files/course/compiler/jscc/simplified_program.txt>`_

`input of simple programming language </files/course/compiler/jscc/sample_input_of_simplified_program.txt>`_

